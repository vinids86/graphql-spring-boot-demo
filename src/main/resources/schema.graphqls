schema {
  query: Query
  mutation: Mutation
}

type Query {
  findPetById(id: ID!): Pet
  findOrderById(id: ID!): Order
}

type Mutation {
  createPet(pet: PetInput!): Pet
  updatePet(id: ID!, pet: PetInput!): Pet
  deletePet(id: ID!): Pet

  createOrder(order: OrderInput!): Order
}

type Order {
  id: ID!
  pet: Pet!
  quantity: Int!
  shipDate: DateTime
  status: OrderStatus!
  complete: Boolean!
}

input OrderInput {
  petId: String!
  quantity: Int!
  shipDate: DateTime
  status: OrderStatus!
  complete: Boolean!
}

scalar DateTime

enum OrderStatus {
    PLACED,
    APPROVED,
    DELIVERED
}

type Pet {
  id: ID!
  category: String!
  name: String!
  photoUrls: [String]!
  tags: [String]!
  status: PetStatus!
}

input PetInput {
  category: String!
  name: String!
  photoUrls: [String]!
  tags: [String]!
  status: PetStatus!
}

enum PetStatus {
  AVAILABLE
  PENDING
  SOLD
}